/* @property --color-primary {
  syntax: '<color>';
  inherits: true;
} */

/* 
 * CSS Type Grinding - https://www.bitovi.com/blog/css-only-type-grinding-casting-tokens-into-useful-values
*/
@layer state;

/*
 * Color Properties
*/
@property --color {
  syntax: 'primary | secondary | danger | background';
  initial-value: primary;
  inherits: true;
}

@property --primary {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --secondary {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --danger {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --primary-else-0 {
  syntax: 'primary | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --secondary-else-0 {
  syntax: 'secondary | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --danger-else-0 {
  syntax: 'danger | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --background {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --background-else-0 {
  syntax: 'background | <integer>';
  initial-value: 0;
  inherits: true;
}

.primary {
  --color: primary;
}

.secondary {
  --color: secondary;
}

.danger {
  --color: danger;
}

[data-compose-ui],
.primary,
.secondary,
.danger,
.background {
  --danger-else-0: var(--color);
  --danger: var(--danger-else-0);
  --primary-else-0: var(--color);
  --primary: var(--primary-else-0);
  --secondary-else-0: var(--color);
  --secondary: var(--secondary-else-0);

  --base-else-0: var(--state);
  --base: var(--base-else-0);
  --hover-else-0: var(--state);
  --hover: var(--hover-else-0);
  --active-else-0: var(--state);
  --active: var(--active-else-0);
  --focus-else-0: var(--state);
  --focus: var(--focus-else-0);
  --disabled-else-0: var(--state);
  --disabled: var(--disabled-else-0);

  /* Get current color based on the value we pass to --color */
  --theme-current-color: color-mix(
    in srgb,
    var(--color-primary, #e3c566) calc(var(--primary) * 100%),
    color-mix(
      in srgb,
      var(--color-secondary, #000) calc(var(--secondary) * 100%),
      var(--color-danger, #bd1414) calc(var(--danger) * 100%)
    )
  );

  /* 
  --theme-current-color-hue: calc(var(--color-bg-hue) * var(--primary) + var(--color-bg-hue) * var(--secondary) + var(--color-bg-hue) * var(--danger));
  --theme-current-color-saturation: calc(var(--color-bg-saturation) * var(--primary) + var(--color-bg-saturation) * var(--secondary) + var(--color-bg-saturation) * var(--danger));
  --theme-current-color-lightness: calc(var(--color-bg-lightness) * var(--primary) + var(--color-bg-lightness) * var(--secondary) + var(--color-bg-lightness) * var(--danger));
  --theme-current-color-opacity: calc(var(--color-bg-opacity) * var(--primary) + var(--color-bg-opacity) * var(--secondary) + var(--color-bg-opacity) * var(--danger)); */

  --is-box-shadow-hidden: calc(1 - var(--raw, 0));
  /* --component-box-shadow-hover: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0
    var(--component-box-shadow-color); */
  --component-box-shadow-color: calc(
    var(--base) * var(--shadow-dark) + var(--hover) * var(--shadow-dark) + var(--active) *
      var(--shadow-dark) + var(--focus) * var(--shadow-dark) + var(--disabled) * var(--shadow-dark)
  );
  --component-box-shadow-color: color-mix(
    in srgb,
    var(--shadow-dark) calc(var(--base) * 100% + var(--hover) * 100%),
    /* var(--theme-current-color) */ var(--shadow-dark)
      calc(var(--active) * 100% + var(--focus) * 100% + var(--disabled) * 100%)
  );
  --shadow-dark: var(--color-main-dark);
  --component-shadow-depth: calc(
    var(--base) * var(--_component-shadow-base) + var(--hover) * var(--_component-shadow-hover) +
      var(--active) * var(--_component-shadow-active) + var(--focus) *
      var(--_component-shadow-focus) + var(--disabled) * var(--_component-shadow-disabled) - 1 *
      var(--_component-transform-depth)
  );
  --component-shadow-depth: calc(
    var(--_component-shadow-base) - 0.75 * var(--_component-transform-depth)
  );
  --shadow-depth: calc(var(--component-shadow-depth) * var(--_layout-depth-base));
  --component-box-shadow-x: calc(var(--is-box-shadow-hidden) * var(--shadow-depth, 0.75));
  --component-box-shadow-y: calc(var(--is-box-shadow-hidden) * var(--shadow-depth, 0.75));

  /**
   * Component Transform
   */
  --_component-transform-depth: calc(
    var(--_component-transform-base) * var(--base) + var(--_component-transform-hover) *
      var(--hover) + var(--_component-transform-active) * var(--active) +
      var(--_component-transform-focus) * var(--focus) + var(--_component-transform-disabled) *
      var(--disabled)
  );
  --transform-depth: calc(var(--_component-transform-depth) * var(--_layout-depth-base));
  /* --transform-depth: var(--_component-transform-depth); */
  --component-transform: translate(var(--transform-depth), var(--transform-depth));
  --component-box-shadow: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0
    var(--component-box-shadow-color);
  --component-box-shadow-base: calc(var(--component-box-shadow-x))
    calc(var(--component-box-shadow-y)) 0 0 black;
  /* 
  --component-box-shadow-hover: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0
    var(--shadow-dark); */

  box-shadow: var(--component-box-shadow);
  transform: var(--component-transform);

  /* --component-box-shadow-hover: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0 black; */
  /* --component-box-shadow-focus: calc(var(--component-box-shadow-x) * var(--theme-base-unit-calc)) calc(var(--component-box-shadow-y) * var(--theme-base-unit-calc)) 0 0 var(--component-box-shadow-color); */
  /* --component-box-shadow-focus: none; */
  /* --component-box-shadow-active: calc(var(--component-box-shadow-x) * var(--theme-base-unit-calc)) calc(var(--component-box-shadow-y) * var(--theme-base-unit-calc)) 0 0 var(--component-box-shadow-color); */
}

/* 
 * Variant Properties
*/
@property --variant {
  syntax: 'contained | outlined | text';
  initial-value: contained;
  inherits: true;
}

@property --contained {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --contained-else-0 {
  syntax: 'contained | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --outlined {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --outlined-else-0 {
  syntax: 'outlined | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --text {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --text-else-0 {
  syntax: 'text | <integer>';
  initial-value: 0;
  inherits: true;
}

.contained {
  --variant: contained;
  --border: no;
}

.outlined {
  --component-color-border: var(--theme-current-color);
  /* --component-color-text: var(--theme-current-color); */
  --component-border-width: 2px;

  --border: yes;

  --variant: outlined;
  --border: yes;
}

.text {
  --variant: text;
}

.contained,
.outlined,
.text {
  --contained-else-0: var(--variant);
  --contained: var(--contained-else-0);
  --outlined-else-0: var(--variant);
  --outlined: var(--outlined-else-0);
  --text-else-0: var(--variant);
  --text: var(--text-else-0);
  border-width: calc(var(--has-border) * var(--component-border-width));
  border-style: calc(var(--has-border) * var(--component-border-style));
  border: var(--component-border-width) var(--component-border-style) var(--component-color-border);
}

/* TODO: dynamic font color based on background */
.y-button span {
  --color-text-not-percentage: var(--color-text-lightness) / 1%;
  --component-text-lightness: calc(
    ((var(--component-bg-lightness) / 1%) - var(--threshold) * 1%) * -100%
  );
}

/* 
 * State Properties
*/
@property --state {
  syntax: 'base | hover | active | focus | disabled';
  initial-value: base;
  inherits: true;
}

@property --base {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --base-else-0 {
  syntax: 'base | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --hover {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --hover-else-0 {
  syntax: 'hover | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --active {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --active-else-0 {
  syntax: 'active | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --focus {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --focus-else-0 {
  syntax: 'focus | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --disabled {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --disabled-else-0 {
  syntax: 'disabled | <integer>';
  initial-value: 0;
  inherits: true;
}

@layer state {
  .base:not([disabled], .disabled) {
    --state: base;
  }

  .hover,
  :hover {
    --state: hover;
  }

  .active,
  :active {
    --state: active;
  }

  :focus,
  .focus-visible,
  .focus,
  :focus-visible {
    --state: focus;
  }

  .disabled,
  :disabled,
  [disabled] {
    --state: disabled;
  }

  .base,
  .hover,
  .active,
  .focus,
  .focus-visible,
  .disabled {
  }
}

/* Raw */
@property --raw {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}

.raw {
  --raw: 1;
}

/* Use of Background color */

@property --use-bg {
  syntax: '<number  >';
  initial-value: 0;
  inherits: true;
}

.use-bg {
  --use-bg: 1;
}

.app-compose {
  background-color: color-mix(
    in srgb,
    var(--color-bg) calc(var(--use-bg) * 100%),
    transparent calc((1 - var(--use-bg)) * 100%)
  );
}

/* ----------------------------------------------------------------------------- */

/* // Typography */

h1,
.text-h1 {
  font-size: var(--_text-h1);
}

h2,
.text-xxl {
  font-size: var(--_text-xxl);
}

h3,
.text-xl {
  font-size: var(--_text-xl);
}

h4,
.text-lg {
  font-size: var(--_text-lg);
}

p {
  font-size: var(--_text-md);
  margin: var(--space-xs) 0;
}

.text-sm {
  font-size: var(--_text-sm);
}

.text-xs {
  font-size: var(--_text-xs);
}

.switch-color {
  --threshold: 0.1;
  --light: var(--color-primary-lightness);
  --switch: calc((var(--light) - var(--threshold)));

  color: oklch(from currentcolor calc(l - var(--threshold)) c h);
}

[data-compose-ui],
.y-button,
.y-input,
.y-select {
  box-shadow: var(--component-box-shadow);
  transform: var(--component-transform);
}
