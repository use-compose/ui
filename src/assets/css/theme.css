/* @property --color-primary {
  syntax: '<color>';
  inherits: true;
} */
@import '@/assets/css/global.css';

/* 
 * CSS Type Grinding - https://www.bitovi.com/blog/css-only-type-grinding-casting-tokens-into-useful-values
*/
@layer state;

/*
 * Color Properties
*/
@property --color {
  syntax: 'primary | secondary | danger';
  initial-value: primary;
  inherits: true;
}

@property --primary {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --secondary {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --danger {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --primary-else-0 {
  syntax: 'primary | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --secondary-else-0 {
  syntax: 'secondary | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --danger-else-0 {
  syntax: 'danger | <integer>';
  initial-value: 0;
  inherits: true;
}

.primary {
  --color: primary;
}

.secondary {
  --color: secondary;
}

.danger {
  --color: danger;
}

.primary,
.secondary,
.danger {
  --danger-else-0: var(--color);
  --danger: var(--danger-else-0);
  --primary-else-0: var(--color);
  --primary: var(--primary-else-0);
  --secondary-else-0: var(--color);
  --secondary: var(--secondary-else-0);

  /* Get current color based on the value we pass to --color */
  --theme-current-color: color-mix(in srgb,
      var(--color-primary, #e3c566) calc(var(--primary) * 100%),
      color-mix(in srgb,
        var(--color-secondary, #000000) calc(var(--secondary) * 100%),
        var(--color-danger, #bd1414) calc(var(--danger) * 100%)));

  /* 
  --theme-current-color-hue: calc(var(--color-bg-hue) * var(--primary) + var(--color-bg-hue) * var(--secondary) + var(--color-bg-hue) * var(--danger));
  --theme-current-color-saturation: calc(var(--color-bg-saturation) * var(--primary) + var(--color-bg-saturation) * var(--secondary) + var(--color-bg-saturation) * var(--danger));
  --theme-current-color-lightness: calc(var(--color-bg-lightness) * var(--primary) + var(--color-bg-lightness) * var(--secondary) + var(--color-bg-lightness) * var(--danger));
  --theme-current-color-opacity: calc(var(--color-bg-opacity) * var(--primary) + var(--color-bg-opacity) * var(--secondary) + var(--color-bg-opacity) * var(--danger)); */

  --is-box-shadow-hidden: calc(1 - var(--raw, 0));

  --component-box-shadow: var(--component-box-shadow-base);
  --component-box-shadow-color: var(--theme-current-color);
  --component-box-shadow-x: calc(var(--is-box-shadow-hidden) * 0.80 * var(--theme-base-unit-calc));
  --component-box-shadow-y: calc(var(--is-box-shadow-hidden) * 0.80 * var(--theme-base-unit-calc));
  --component-transform: translate(0, 0);
  --component-box-shadow-base: calc(var(--component-box-shadow-x) * 0.5) calc(var(--component-box-shadow-y) * 0.5) 0 0 black;

  /* --component-box-shadow-base: none; */

  --component-box-shadow-hover: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0 var(--component-box-shadow-color);

  /* --component-box-shadow-hover: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0 black; */
  --component-box-shadow-focus: var(--component-box-shadow-x) var(--component-box-shadow-y) 0 0 var(--component-box-shadow-color);
  --component-box-shadow-active: calc(var(--component-box-shadow-x) - 50% * var(--theme-base-unit-calc)) calc(var(--component-box-shadow-y) - 50% * var(--theme-base-unit-calc)) 0 0 var(--component-box-shadow-color);

}

/* 
 * Variant Properties
*/
@property --variant {
  syntax: 'contained | outlined | text';
  initial-value: contained;
  inherits: true;
}

@property --contained {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --contained-else-0 {
  syntax: 'contained | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --outlined {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --outlined-else-0 {
  syntax: 'outlined | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --text {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --text-else-0 {
  syntax: 'text | <integer>';
  initial-value: 0;
  inherits: true;
}

.contained {
  --variant: contained;
}

.outlined {
  --variant: outlined;
}

.text {
  --variant: text;
}

.contained,
.outlined,
.text {
  --contained-else-0: var(--variant);
  --contained: var(--contained-else-0);
  --outlined-else-0: var(--variant);
  --outlined: var(--outlined-else-0);
  --text-else-0: var(--variant);
  --text: var(--text-else-0);
}


/* TODO: dynamic font color based on background */
.y-button span {
  --color-text-not-percentage: var(--color-text-lightness) / 1%;
  --component-text-lightness: calc(((var(--component-bg-lightness) / 1%) - var(--threshold) * 1%) * -100%);
}

.outlined {
  --component-color-border: var(--theme-current-color);
  --component-color-text: var(--theme-current-color);
}

/* 
 * State Properties
*/
@property --state {
  syntax: 'base | hover | active | focus | disabled';
  initial-value: base;
  inherits: true;
}

@property --base {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --base-else-0 {
  syntax: 'base | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --hover {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --hover-else-0 {
  syntax: 'hover | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --active {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --active-else-0 {
  syntax: 'active | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --focus {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --focus-else-0 {
  syntax: 'focus | <integer>';
  initial-value: 0;
  inherits: true;
}

@property --disabled {
  syntax: '<integer>';
  initial-value: 1;
  inherits: true;
}

@property --disabled-else-0 {
  syntax: 'disabled | <integer>';
  initial-value: 0;
  inherits: true;
}

@layer state {
  .base:not([disabled], .disabled) {
    --state: base;
  }

  .hover {
    --state: hover;
  }

  .active {
    --state: active;
  }

  .focus {
    --state: focus;
  }

  .disabled {
    --state: disabled;
  }

  .base,
  .hover,
  .active,
  .focus,
  .focus-visible,
  .disabled {
    --base-else-0: var(--state);
    --base: var(--base-else-0);
    --hover-else-0: var(--state);
    --hover: var(--hover-else-0);
    --active-else-0: var(--state);
    --active: var(--active-else-0);
    --focus-else-0: var(--state);
    --focus: var(--focus-else-0);
    --disabled-else-0: var(--state);
    --disabled: var(--disabled-else-0);
  }
}


/* Raw */
@property --raw {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}

.raw {
  --raw: 1;
}

/* .focus,
:focus,
:focus-within,
:focus-visible {
  --state: focus;
}

.disabled {
  --state: disabled;
}

:root {}

.app-compose {



  --base: var(--disabled);
  --hover: var(--active);
  --active: var(--hover);
  --focus: var(--base);
  --disabled: var(--state);
  /* --ttt: hsl(calc(45 * 1), calc(68% * 1), calc(39% * 0 + 0% * 0 + 0% * 1 + 0% * 0 + 0% * 0 + 50% * 1 + 40% * 0 + 30% * 0 + 30% * 0 + 0% * 0));
  background-color: var(--ttt);
  color: blue; */


h1,
.text-h1,
h2,
.text-xxl,
h3,
.text-xl,
h4,
.text-lg,
h5 {
  font-family: gotham-black;
  text-transform: uppercase;
  color: var(--theme-current-color);
}

.switch-color {
  --threshold: 0.10;
  --light: var(--color-primary-lightness);
  --switch: calc((var(--light) - var(--threshold)));

  color: oklch(from currentcolor calc(l - var(--threshold)) c h);
}