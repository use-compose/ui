// From https://dev.to/felipperegazio/css-custom-properties-vars-with-sass-scss-a-practical-architecture-strategy-1m88

/**
 * Use this mixin to declare a set of CSS Custom Properties.
 * The variables in $css_variables will be properly prefixed.
 * The use of this mixin is encoraged to keep a good scalability.
 *
 * Usage:
 *
 * @include cssvars((
 *  base-font-size: 65.5%,
 *  font-family: #{"HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif},
 * 
 *  primary-color: #33b5e5,
 *  secondary-color: #ff500a,
 * ));
 *
 * Will result in
 *
 * root {
 *    --prefix-var-name: value;
 *    --prefix-var-name: value;
 *    --prefix-var-name: value;
 * }
 *
 */
@mixin cssvars($prefix, $css_variables, $root: false) {
  :root {
    @each $name, $value in $css_variables {
      $key: '' + $name; // force string; avoids Sass color interpolation warnings

      @if $prefix == '' {
        --#{$name}: #{$value};
      } @else {
        --#{$prefix}-#{$key}: #{$value};
      }
    }
  }
}

// CSS Custom properties modifiers

//  Spacing
@mixin space($name, $value: '', $prefix: space) {
  --#{$prefix}-#{$name}: #{$value};
}

//  Typography
@mixin text($name, $value: '', $prefix: text) {
  --#{$prefix}-#{$name}: #{$value};
}

// Colors
@mixin color($name, $value: '', $prefix: color) {
  --#{$prefix}-#{$name}: #{$value};
}

// State
@mixin state($name, $value: '', $prefix: state) {
  --#{$prefix}-#{$name}: #{$value};
}

// Components
@mixin component($name, $value: '', $prefix: component) {
  --#{$prefix}-#{$name}: #{$value};
}

// Theme
@mixin theme($name, $value: '', $prefix: theme) {
  --#{$prefix}-#{$name}: #{$value};
}

// Theme
@mixin y-btn($name, $value: '', $prefix: y-btn) {
  --#{$prefix}-#{$name}: #{$value};
}

// Checkbox
@mixin y-checkbox($name, $value: '', $prefix: y-checkbox) {
  --#{$prefix}-#{$name}: #{$value};
}

@mixin theme-color($name, $value: '', $prefix: '') {
  --#{$name}: #{$value};
}

@mixin breakpoint($name, $value: '', $prefix: breakpoint) {
  --#{$prefix}-#{$name}: #{$value};
}

// -----------------------------------------------------------------------------
// 5 - Theme / component props

@mixin resolve-lch-value($prop, $prop-value) {
  --#{$prop}-bg-hue: var(--#{$prop}-#{$prop-value}-bg-hue);
  --#{$prop}-bg-chroma: var(--#{$prop}-#{$prop-value}-bg-chroma);
  --#{$prop}-bg-lightness: var(--#{$prop}-#{$prop-value}-bg-lightness);
  --#{$prop}-bg-opacity: var(--#{$prop}-#{$prop-value}-bg-opacity);
  --#{$prop}-border-hue: var(--#{$prop}-#{$prop-value}-border-hue);
  --#{$prop}-border-chroma: var(--#{$prop}-#{$prop-value}-border-chroma);
  --#{$prop}-border-lightness: var(--#{$prop}-#{$prop-value}-border-lightness);
  --#{$prop}-border-opacity: var(--#{$prop}-#{$prop-value}-border-opacity);
  --#{$prop}-text-hue: var(--#{$prop}-#{$prop-value}-text-hue);
  --#{$prop}-text-chroma: var(--#{$prop}-#{$prop-value}-text-chroma);
  --#{$prop}-text-lightness: var(--#{$prop}-#{$prop-value}-text-lightness);
  --#{$prop}-text-opacity: var(--#{$prop}-#{$prop-value}-text-opacity);
  --#{$prop}: #{$prop-value};
}

// Colors

// @mixin base {
//   &.base:not([disabled]) {
//     @include resolve-lch-value('state', base);

//     @content;
//   }
// }
